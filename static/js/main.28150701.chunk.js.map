{"version":3,"sources":["API.ts","utils.ts","components/QuestionCard.tsx","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","QuestionCard","callbakc","callback","userAnswer","questionNr","totalQuestions","dangerouslySetInnerHTML","__html","answer","className","key","value","disabled","onClick","App","useState","loading","setLoading","questions","setQuestion","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","correct","prev","answerObject","correctAnswer","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mLAEYA,E,sFAAAA,K,YAAAA,E,gBAAAA,E,aAAAA,M,KAML,IAAMC,EAAkB,uCAAG,WAChCC,EACAC,GAFgC,iBAAAC,EAAA,6DAI1BC,EAJ0B,6CAIuBH,EAJvB,uBAI4CC,EAJ5C,2BAKNG,MAAMD,GALA,8BAKWE,OALX,cAK1BC,EAL0B,yBAOzBA,EAAKC,QAAQC,KAAI,SAACC,GAAD,sBACnBA,EADmB,CAEtBC,SCjByBC,EDiBH,GAAD,mBAChBF,EAASG,mBADO,CAEnBH,EAASI,iBClBf,YAAIF,GAAOG,MAAK,kBAAMC,KAAKC,SAAW,SADV,IAACL,MDQK,2CAAH,wDE6BhBM,EA1B0C,SAAC,GAOnD,IANLR,EAMI,EANJA,SACAC,EAKI,EALJA,QACUQ,EAIN,EAJJC,SACAC,EAGI,EAHJA,WACAC,EAEI,EAFJA,WACAC,EACI,EADJA,eAEA,OACE,6BACE,wCACaD,EADb,MAC4BC,GAE5B,uBAAGC,wBAAyB,CAAEC,OAAQf,KACtC,6BACGC,EAAQF,KAAI,SAACiB,GAAD,OACX,yBAAKC,UAAU,UAAUC,IAAKF,GAC5B,4BAAQC,UAAW,SAAUE,MAAOH,EAAQI,WAAUT,EAA2BU,QAASZ,GACxF,0BAAMK,wBAAyB,CAAEC,OAAQC,aCkExCM,G,MAvFO,WAAO,IAAD,EACIC,oBAAkB,GADtB,mBACnBC,EADmB,KACVC,EADU,OAEOF,mBAA0B,IAFjC,mBAEnBG,EAFmB,KAERC,EAFQ,OAGEJ,mBAAiB,GAHnB,mBAGnBK,EAHmB,KAGXC,EAHW,OAIYN,mBAAyB,IAJrC,mBAInBO,EAJmB,KAINC,EAJM,OAKAR,mBAAiB,GALjB,mBAKnBS,EALmB,KAKZC,EALY,OAMMV,oBAAkB,GANxB,mBAMnBW,EANmB,KAMTC,EANS,KAUpBC,EAAW,uCAAG,4BAAA3C,EAAA,6DAClBgC,GAAW,GACXU,GAAY,GAFM,SAIS7C,EAjBP,GAmBlBD,EAAWgD,MANK,OAIZC,EAJY,OASlBX,EAAYW,GACZL,EAAS,GACTF,EAAe,IACfF,EAAU,GACVJ,GAAW,GAbO,4CAAH,qDA+CjB,OACE,yBAAKR,UAAU,QACb,0CACA,kDACCiB,GAhEiB,KAgELJ,EAAYS,OACvB,4BAAQtB,UAAU,QAAQI,QAASe,GAAnC,SAGE,KACFF,EAAqD,KAA1C,uBAAGjB,UAAU,SAAb,UAA6Be,GACzCR,GAAW,uBAAGP,UAAU,WAAb,uBACVO,IAAYU,GACZ,kBAAC,EAAD,CACEtB,WAAYgB,EAAS,EACrBf,eA1Ec,GA2Edb,SAAU0B,EAAUE,GAAQ5B,SAC5BC,QAASyB,EAAUE,GAAQ3B,QAC3BU,WAAYmB,EAAcA,EAAYF,QAAUY,EAChD9B,SAjDY,SAAC+B,GACnB,IAAIP,EAAU,CAEZ,IAAMlB,EAASyB,EAAEC,cAAcvB,MAEzBwB,EAAUjB,EAAUE,GAAQxB,iBAAmBY,EAElD2B,GAASV,GAAS,SAACW,GAAD,OAAUA,EAAO,KAEtC,IAAMC,EAAe,CACnB7C,SAAU0B,EAAUE,GAAQ5B,SAC5BgB,SACA2B,UACAG,cAAepB,EAAUE,GAAQxB,gBAEnC2B,GAAe,SAAAa,GAAI,4BAAQA,GAAR,CAAcC,WAqC7BX,GAAaV,GAAWM,EAAYS,SAAWX,EAAS,GAAgBmB,IAAXnB,EAI3D,KAHF,4BAAQX,UAAU,OAAOI,QAjCZ,WAEnB,IAAM2B,EAAepB,EAAS,EAnDV,KAqDjBoB,EACHb,GAAY,GAEVN,EAAUmB,KA0BN,oBCnFVC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.28150701.chunk.js","sourcesContent":["import { shuffleArray } from \"./utils\";\r\n\r\nexport enum Difficulty {\r\n  EASY = \"easy\",\r\n  MEDIUM = \"medium\",\r\n  HARD = \"hard\",\r\n}\r\n\r\nexport const fetchQuizQuestions = async (\r\n  amount: number,\r\n  difficulty: Difficulty\r\n) => {\r\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n  const data = await (await fetch(endpoint)).json();\r\n  // console.log(data);\r\n  return data.results.map((question: Question) => ({\r\n    ...question,\r\n    answers: shuffleArray([\r\n      ...question.incorrect_answers,\r\n      question.correct_answer,\r\n    ]),\r\n  }));\r\n};\r\n","export const shuffleArray = (array: any[]) => \r\n[...array].sort(() => Math.random() - 0.5);","import React from \"react\";\r\n\r\ninterface QuestionCardProps {\r\n  question: string;\r\n  answers: string[];\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  userAnswer: AnswerObject | undefined;\r\n  questionNr: number;\r\n  totalQuestions: number;\r\n}\r\n\r\nexport const QuestionCard: React.FC<QuestionCardProps> = ({\r\n  question,\r\n  answers,\r\n  callback: callbakc,\r\n  userAnswer,\r\n  questionNr,\r\n  totalQuestions,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <p>\r\n        Question: {questionNr} / {totalQuestions}\r\n      </p>\r\n      <p dangerouslySetInnerHTML={{ __html: question }} />\r\n      <div>\r\n        {answers.map((answer) => (\r\n          <div className=\"wrapper\" key={answer}>\r\n            <button className={\"choose\"} value={answer} disabled={userAnswer ? true : false} onClick={callbakc}>\r\n              <span dangerouslySetInnerHTML={{ __html: answer }}></span>\r\n            </button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default QuestionCard;\r\n","import React, { useState } from \"react\";\nimport { Difficulty, fetchQuizQuestions } from \"./API\";\nimport QuestionCard from \"./components/QuestionCard\";\nimport './style/style.scss';\n\nconst TOTAL_QUESTIONS = 10;\n\n\nconst App: React.FC = () => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [questions, setQuestion] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState<number>(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState<number>(0);\n  const [gameOver, setGameOver] = useState<boolean>(true);\n\n  // console.log(questions);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n\n    setQuestion(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if(!gameOver) {\n      //users answer\n      const answer = e.currentTarget.value;\n      // check answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n      // add score if answer is corect\n      if(correct) setScore((prev) => prev + 1);\n      // save answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      };\n      setUserAnswers(prev => [...prev, answerObject]);\n    }\n\n  };\n\n  const nextQuestion = () => {\n    // move on the next question if not the last question\n    const nextQuestion = number + 1;\n    \n    if(nextQuestion === TOTAL_QUESTIONS) {\n    setGameOver(true);\n    } else {\n      setNumber(nextQuestion)\n    }\n  };\n\n  return (\n    <div className=\"quiz\">\n      <h1>React Quiz</h1>\n      <div>General Knowledge</div>\n      {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n        <button className=\"start\" onClick={startTrivia}>\n          Start\n        </button>\n      ) : null}\n      {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n      {loading && <p className=\"loading\">Loading Qestion...</p>}\n      {!loading && !gameOver && (\n        <QuestionCard\n          questionNr={number + 1}\n          totalQuestions={TOTAL_QUESTIONS}\n          question={questions[number].question}\n          answers={questions[number].answers}\n          userAnswer={userAnswers ? userAnswers[number] : undefined}\n          callback={checkAnswer}\n        />\n        )}\n        {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\n          <button className=\"next\" onClick={nextQuestion}>\n            Next Question\n          </button>\n        ) : null }\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}